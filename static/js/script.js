document.addEventListener('DOMContentLoaded', function() {

    // --- –õ–û–ì–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò –§–û–†–ú–´ ---
    function validateForm() {
        const errors = [];
        const cellRegex = /^[A-Z]+[1-9][0-9]*$/i; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —è—á–µ–µ–∫ —Ç–∏–ø–∞ A1, B12
        const allowedExtensions = ['xlsx', 'xlsm'];

        const sourceFile = document.getElementById('source_file').files[0];
        const sourceRange = document.getElementById('source_range_start').value;
        const savedTemplate = document.getElementById('saved_template').value;
        const templateFile = document.getElementById('template_file').files[0];
        const templateRange = document.getElementById('template_range_start').value;

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (!sourceFile) {
            errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª.');
        } else {
            const fileExt = sourceFile.name.split('.').pop().toLowerCase();
            if (!allowedExtensions.includes(fileExt)) {
                errors.push(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .${allowedExtensions.join(', .')}.`);
            }
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (!sourceRange) {
            errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.');
        } else if (!cellRegex.test(sourceRange)) {
            errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä: A1).');
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
        if (!savedTemplate) {
            if (!templateFile) {
                errors.push('–ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞.');
            } else {
                 const fileExt = templateFile.name.split('.').pop().toLowerCase();
                if (!allowedExtensions.includes(fileExt)) {
                    errors.push(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .${allowedExtensions.join(', .')}.`);
                }
            }

            if (!templateRange) {
                errors.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞.');
            } else if (!cellRegex.test(templateRange)) {
                errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: A1).');
            }
        }

        return errors;
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    const form = document.getElementById('process-form');
    if (form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault(); // –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–Ω–∞—á–∞–ª–∞

            const errorContainer = document.getElementById('error-messages');
            const errors = validateForm();

            if (errors.length > 0) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                errorContainer.innerHTML = '<strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:</strong><ul>' + errors.map(e => `<li>${e}</li>`).join('') + '</ul>';
                errorContainer.style.display = 'block';
                window.scrollTo(0, 0); // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
                return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            } else {
                // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                errorContainer.style.display = 'none';
            }

            // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ AJAX
            const formData = new FormData(form);
            const progressBar = document.getElementById('progress-bar');
            const progressContainer = document.getElementById('progress-container');
            const statusText = document.getElementById('status-text');
            const downloadLink = document.getElementById('download-link');
            const startButton = form.querySelector('button[type="submit"]');

            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            statusText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...';
            downloadLink.style.display = 'none';
            startButton.disabled = true;

            fetch('/process', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    statusText.textContent = `–û—à–∏–±–∫–∞: ${data.error}`;
                    startButton.disabled = false;
                    return;
                }
                statusText.textContent = '–§–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...';
                pollStatus(data.task_id);
            })
            .catch(error => {
                statusText.textContent = `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error}`;
                startButton.disabled = false;
            });
        });
    }

    function pollStatus(taskId) {
        const progressBar = document.getElementById('progress-bar');
        const statusText = document.getElementById('status-text');
        const downloadLink = document.getElementById('download-link');
        const startButton = form.querySelector('button[type="submit"]');

        const interval = setInterval(() => {
            fetch(`/status/${taskId}`)
            .then(response => response.json())
            .then(data => {
                progressBar.style.width = `${data.progress || 0}%`;
                statusText.textContent = data.status || '–û–∂–∏–¥–∞–Ω–∏–µ...';

                if ((data.progress && data.progress >= 100) || data.result_file) {
                    clearInterval(interval);
                    if (data.result_file) {
                        downloadLink.href = `/download/${data.result_file}`;
                        downloadLink.style.display = 'block';
                        statusText.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
                    }
                    startButton.disabled = false;
                }
            })
            .catch(error => {
                clearInterval(interval);
                statusText.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: ${error}`;
                startButton.disabled = false;
            });
        }, 2000);
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞ –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞
    const savedTemplateSelect = document.getElementById('saved_template');
    const newTemplateFields = document.getElementById('new-template-fields');

    if (savedTemplateSelect && newTemplateFields) {
         savedTemplateSelect.addEventListener('change', function() {
            if (this.value) {
                newTemplateFields.style.display = 'none';
            } else {
                newTemplateFields.style.display = 'block';
            }
        });
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (savedTemplateSelect.value) {
            newTemplateFields.style.display = 'none';
        }
    }

    const manualRulesContainer = document.getElementById('manual-rules-container');
    if(manualRulesContainer) {
        document.getElementById('add-manual-rule').addEventListener('click', function() {
            const newRule = document.createElement('div');
            newRule.className = 'manual-rule-row';
            newRule.innerHTML = `
                <input type="text" name="manual_source_col" placeholder="–ö–æ–ª–æ–Ω–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ (–Ω–∞–ø—Ä. A)">
                <span>‚Üí</span>
                <input type="text" name="manual_template_col" placeholder="–ö–æ–ª–æ–Ω–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ (–Ω–∞–ø—Ä. C)">
                <button type="button" class="remove-rule-btn">üóëÔ∏è</button>
            `;
            manualRulesContainer.appendChild(newRule);
        });

        manualRulesContainer.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-rule-btn')) {
                e.target.parentElement.remove();
            }
        });
    }
});